{
  "tasks": [
    {
      "task_number": 170,
      "prompt_title": "Count of Range Sum",
      "prompt_description": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\n\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\n\n \n\nExample 1:\n\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\nExample 2:\n\nInput: nums = [0], lower = 0, upper = 0\nOutput: 1\n \n\nConstraints:\n\n1 <= nums.length <= 10^5\n-2^31 <= nums[i] <= 2^31 - 1\n-10^5 <= lower <= upper <= 10^5\nThe answer is guaranteed to fit in a 32-bit integer.",
      "hints": {
        "java": "",
        "c": "",
        "cpp": "",
        "python": ""
      },
      "solutions": {
        "generated_by": "",
        "java": "",
        "c": "",
        "cpp": "",
        "python": ""
      },
      "source": "https://leetcode.com/problems/count-of-range-sum/description/",
      "tags": [ "Binary Indexed Tree", "Ordered Set", "Binary Search", "Array", "Segment Tree", "Divide and Conquer"],
      "comments": ""
    }
  ]
}